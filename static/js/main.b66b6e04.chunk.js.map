{"version":3,"sources":["lib/color-map.js","actions/index.js","containers/cell.js","components/Cell.js","components/Row.js","components/Timer.js","components/Progress.js","containers/board.js","components/Board.js","containers/detonator.js","components/Detonator.js","lib/difficulties.js","containers/game.js","components/Game.js","components/Difficulty.js","containers/difficulty.js","App.js","serviceWorker.js","lib/GameCell.js","lib/generate-cells.js","lib/GameBoard.js","reducers/click-cell.js","reducers/index.js","reducers/flag-cell.js","index.js"],"names":["colorMap","1","2","3","4","5","6","7","8","setDifficulty","difficulty","type","connect","selectedCells","flaggedCells","exploded","gameOver","cell","isVisible","includes","isFlagged","isExploded","dispatch","flagCell","e","preventDefault","clickCell","data-test-detonated","className","icon","explode","data-test-flagged","onContextMenu","flag","isMine","data-test-visible-mine","bomb","number","colorClass","data-test-visible","data-test-empty","data-test-hidden","onClick","Row","props","cells","row","map","x","data-column","key","id","data-row","y","gameRunning","gameWon","useState","seconds","setSeconds","useEffect","interval","setInterval","clearInterval","classes","Progress","message","board","length","totalCells","totalMines","rows","data-y","Timer","clickedMine","chainReaction","mines","remaining","setRemaining","clicked","distance","Math","hypot","sort","a","b","prepareMines","mine","nextGroup","nextMineTime","random","difficulties","easy","width","height","density","medium","hard","insane","validDifficulties","Object","keys","resetGame","history","setDifficultyFromUrl","value","goHome","push","difficultyFromUrl","useParams","OPTIONS","label","str","toUpperCase","slice","style","textAlign","options","onChange","App","path","component","Game","Difficulty","Boolean","window","location","hostname","match","GameCell","this","fetchSiblings","filter","sibling","memoize","generateCell","count","floor","generateMine","GameBoard","column","generateCells","todoTop","currentVisible","todo","siblings","indexOf","newVisible","moreTodo","_doneFetchChainedCells","visible","fetchChainedCells","results","w","h","bottom","left","right","y2","x2","flat","state","newCells","clearCell","RESET_GAME_ACTIONS","stateFilter","action","gameParams","aCell","store","createStore","result","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b66b6e04.chunk.js","sourcesContent":["export const colorMap = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'eight'\n};\n","export function clickCell(cell) {\n  return {\n    type: 'CLICK_CELL',\n    cell\n  };\n}\n\nexport function flagCell(cell) {\n  return {\n    type: 'CLICK_FLAG',\n    cell\n  };\n}\n\nexport function resetGame() {\n  return {\n    type: 'RESET_GAME'\n  }\n}\n\nexport function setDifficulty(difficulty) {\n  return {\n    type: 'SET_DIFFICULTY',\n    difficulty\n  };\n}\n\nexport function chainReaction(cell) {\n  return {\n    type: 'CHAIN_REACTION',\n    cell\n  };\n}\n","import { connect } from 'react-redux'\nimport Cell from '../components/Cell'\nimport { clickCell, flagCell } from '../actions'\n\nconst mapStateToProps = ({ selectedCells, flaggedCells, exploded, gameOver }, { cell }) => {\n  return {\n    isVisible: gameOver || selectedCells.includes(cell),\n    isFlagged: flaggedCells.includes(cell),\n    isExploded: exploded.includes(cell),\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  flagCell: (e, cell) => {\n    e.preventDefault();\n\n    return dispatch(flagCell(cell));\n  },\n\n  clickCell: (e, cell) => {\n    e.preventDefault();\n\n    return dispatch(clickCell(cell));\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Cell)\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCog as explode,\n  faFlag as flag,\n  faBomb as bomb\n} from '@fortawesome/free-solid-svg-icons'\nimport { colorMap } from '../lib/color-map'\n\nexport default function Cell({ cell, isFlagged, isVisible, isExploded, flagCell, clickCell }) {\n  if (isExploded) {\n    return (\n      <div data-test-detonated className=\"cell detonate\">\n        <FontAwesomeIcon icon={explode}/>\n      </div>\n    )\n\n  } else if (isFlagged) {\n    return (\n      <div data-test-flagged className=\"cell raised flag\"  onContextMenu={(e) => { flagCell(e, cell) }}>\n        <FontAwesomeIcon icon={flag}/>\n      </div>\n    )\n\n  } else if (!isVisible) {\n    return (\n      <div data-test-hidden className=\"cell raised\" onContextMenu={(e) => { flagCell(e, cell) }} onClick={(e) => { clickCell(e, cell) }}>\n      </div>\n    )\n\n  } else if (cell.isMine) {\n    return (\n      <div data-test-visible-mine className=\"cell bomb\">\n        <FontAwesomeIcon icon={bomb}/>\n      </div>\n    )\n\n  } else if (cell.number !== 0) {\n    const colorClass = colorMap[cell.number];\n\n    return (\n      <div data-test-visible className={ 'cell ' + colorClass }>\n        {cell.number}\n      </div>\n    )\n\n  } else {\n    return (\n      <div data-test-empty className=\"cell empty\"/>\n    )\n  }\n}\n","import React from 'react';\nimport Cell from '../containers/cell';\n\nexport default function Row(props) {\n  const cells = props.row.map((cell, x) => {\n    return (\n      <Cell\n        data-column={x}\n        key={cell.id}\n        cell={cell}\n      />\n    );\n  });\n\n  return (\n    <div data-row={props.y} key={props.y} className='row'>\n      {cells}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function({ gameRunning, gameOver, gameWon }) {\n  const [seconds, setSeconds] = useState(1);\n\n  useEffect(() => {\n    // Use `setInterval` so that if this component tears down mid-tick, we can stop\n    // the next tick.\n    let interval = null;\n\n    if (gameRunning) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  });\n\n  const classes = gameWon ? 'timer won' : 'timer';\n\n  if (gameRunning || gameOver) {\n    return (\n      <div className={classes}>\n        {seconds}\n      </div>\n    )\n  } else {\n    return <div className='timer-blank'/>\n  }\n}\n","import React from 'react';\n\nexport default function Progress({ selectedCells, flaggedCells, board, gameWon, gameOver }) {\n  let message;\n\n  if (gameOver && gameWon) {\n    message = <div>Congratulations, you win!</div>\n  } else if (gameOver) {\n    message = <div>Sorry, please try again :(</div>\n  }\n\n  return (\n    <div className='progress'>\n      <dl>\n        <dt>Cells</dt>\n        <dd>{selectedCells.length} / {board.totalCells}</dd>\n      </dl>\n      <dl>\n        <dt>Flags</dt>\n        <dd>{flaggedCells.length} / {board.totalMines}</dd>\n      </dl>\n      {message}\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport Board from '../components/Board'\n\nconst mapStateToProps = ({ board, gameRunning, gameOver, gameWon, selectedCells, flaggedCells }) => ({\n  board,\n  gameRunning,\n  gameOver,\n  gameWon,\n  selectedCells,\n  flaggedCells\n})\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Board)\n","import React from 'react';\nimport Row from './Row';\nimport Timer from './Timer';\nimport Progress from './Progress';\n\nexport default function Board({ board, gameRunning, gameOver, gameWon, selectedCells, flaggedCells }) {\n  const rows = board\n    .rows\n    .map((row, y) => (\n      <Row row={row} data-y={y} key={y} />\n    ));\n\n  return (\n    <div className='game'>\n      <Progress selectedCells={selectedCells} flaggedCells={flaggedCells} gameWon={gameWon} gameOver={gameOver} board={board}/>\n      <Timer gameRunning={gameRunning} gameOver={gameOver} gameWon={gameWon}/>\n\n      <div className='board'>{rows}</div>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport Detonator from '../components/Detonator'\nimport { chainReaction } from '../actions';\n\nconst mapStateToProps = ({ board, clickedMine }) => ({\n  board,\n  clickedMine,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  chainReaction: (cell) => dispatch(chainReaction(cell)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Detonator)\n","import { useEffect, useState } from 'react';\n\n// Too low and the browser will choke on harder difficulties\n// Too high and detonation will take forever\nconst MINE_SPEED = 200;\n\nexport default function({ board, clickedMine, chainReaction }) {\n  const { mines } = board;\n  const [remaining, setRemaining] = useState([]);\n\n  // This effect triggers the detonation.\n  useEffect(() => {\n    if (clickedMine) {\n      setRemaining(prepareMines(mines, clickedMine));\n    }\n  }, [clickedMine]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Detonation effect.  Will abort if `clickedMine` is unset.\n  useEffect(() => {\n    if (!clickedMine || remaining.length === 0) {\n      return;\n    }\n\n    const [mine, ...nextGroup] = remaining;\n\n    chainReaction(mine.cell);\n\n    if (nextGroup.length > 0) {\n      let interval;\n      const nextMineTime = Math.random() * MINE_SPEED;\n\n      interval = setInterval(() => {\n        setRemaining(nextGroup);\n      }, nextMineTime)\n\n      return () => clearInterval(interval);\n    }\n  }, [remaining, clickedMine]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (null);\n}\n\n// Calculates distances for each mine in the field from the clicked mine, and sorts\n// the mines based on their distance from the clicked mine.\n// Not for larger boards this can result in some initial latency\nfunction prepareMines(mines, clicked) {\n  return mines.map(cell => {\n    const distance = Math.hypot(cell.x - clicked.x, cell.y - clicked.y);\n\n    return {\n      distance, cell\n    };\n  }).sort((a, b) => a.distance - b.distance);\n}\n","export const difficulties = {\n  easy: {\n    width: 10,\n    height: 10,\n    density: 10\n  },\n  medium: {\n    width: 30,\n    height: 25,\n    density: 120\n  },\n  hard: {\n    width: 50,\n    height: 30,\n    density: 220\n  },\n  insane: {\n    width: 60,\n    height: 30,\n    density: 350\n  }\n};\n\nexport const validDifficulties = Object.keys(difficulties);\n","import { connect } from 'react-redux'\nimport Game from '../components/Game'\nimport { resetGame, setDifficulty } from '../actions';\nimport { validDifficulties } from '../lib/difficulties';\n\nconst mapStateToProps = ({ difficulty, resetGame }, { history }) => ({\n  difficulty,\n  resetGame,\n  history\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame: () => dispatch(resetGame()),\n\n  setDifficultyFromUrl: (value) => {\n    if (validDifficulties.includes(value)) {\n      dispatch(setDifficulty(value));\n      return true;\n    }\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game)\n","import Board from '../containers/board';\nimport Detonator from '../containers/detonator';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function Game({ resetGame, difficulty, history, setDifficultyFromUrl }) {\n  const goHome = () => history.push('/');\n  const { difficulty: difficultyFromUrl } = useParams();\n\n  if (!difficulty) {\n    if (!setDifficultyFromUrl(difficultyFromUrl)) {\n      goHome();\n    }\n\n    return (null);\n  }\n\n  return (\n    <section>\n      <button onClick={goHome}>Change Difficulty</button>\n      <button onClick={resetGame}>Start Over</button>\n      <Board/>\n      <Detonator/>\n    </section>\n  )\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport { difficulties } from '../lib/difficulties';\n\nconst OPTIONS = Object.keys(difficulties)\n  .map((key) => ({\n    value: key,\n    label: uppercase(key)\n  }));\n\nfunction uppercase(str) {\n  return `${ str[0].toUpperCase() }${ str.slice(1) }`;\n}\n\nexport default function Difficulty({ difficulty, setDifficulty }) {\n  return (\n    <div className='difficulty'>\n      <div className='difficulty__selector' style={{textAlign: 'left'}}>\n        <h3>Select Difficulty</h3>\n        <Select options={OPTIONS} onChange={setDifficulty}/>\n      </div>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport { setDifficulty } from '../actions'\nimport Difficulty from '../components/Difficulty'\nimport { validDifficulties } from '../lib/difficulties';\n\nconst mapDispatchToProps = (dispatch, { history }) => ({\n  setDifficulty: ({ value }) => {\n    dispatch(setDifficulty(value));\n\n    if (validDifficulties.includes(value)) {\n      history.push(`/${ value }`);\n    }\n  }\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Difficulty)\n","import React from 'react';\nimport './App.scss';\nimport Game from './containers/game';\nimport Difficulty from './containers/difficulty';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <main className='app'>\n      <Router>\n        <Switch>\n          <Route path='/:difficulty' component={Game}/>\n          <Route path='/' component={Difficulty}/>\n        </Switch>\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import memoize from 'memoize-decorator'\n\nclass GameCell {\n  /**\n   * @param {GameBoard} board\n   * @param {Integer} id\n   * @param {Boolean} isMine\n   * @param {Integer} x\n   * @param {Integer} y\n   */\n  constructor(board, id, isMine, x, y) {\n    this.board = board;\n    this.id = id;\n    this.isMine = isMine;\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * @return {Integer}\n   */\n  @memoize\n  get number() {\n    if (this.isMine) {\n      return '!'\n    } else {\n      return this.board\n        .fetchSiblings(this)\n        .filter(sibling => sibling.isMine).length;\n    }\n  }\n}\n\nexport default GameCell;\n","import GameCell from './GameCell';\n\n// @TODO Ensure that you cannot have any impossible cells\n// @TODO Ensure that you cannot have any 50/50 cells\n// @TODO Immutable\nexport default function generateCells(board) {\n  const mines = [];\n\n  for (let y = 0; y < board.height; y++) {\n    const column = [];\n\n    for (let x = 0; x < board.width; x++) {\n      column.push(generateCell(board, x, y));\n    }\n\n    mines.push(column);\n  }\n\n  return mines;\n}\n\nfunction generateCell(board, x, y) {\n  const isMine = generateMine(board.totalCells, board.density);\n  const id = (y * board.width) + x;\n  const cell = new GameCell(\n    board,\n    id,\n    isMine,\n    x,\n    y\n  )\n\n  return cell;\n}\n\nfunction generateMine(cells, density) {\n  const count = cells / density;\n  const random = Math.floor(Math.random() * count)\n\n  return random === 1;\n}\n","import memoize from 'memoize-decorator'\nimport generateCells from '../lib/generate-cells';\n\nexport default class GameBoard {\n  /**\n   * @param [Integer] height\n   * @param [Integer] width\n   * @param [Integer] density\n   */\n  constructor(height = 0, width = 0, density = 1) {\n    this.height = height;\n    this.width = width;\n    this.density = density;\n    this.rows = generateCells(this);\n  }\n\n  /**\n   * @return [Integer]\n   */\n  @memoize\n  get totalCells() {\n    return this.height * this.width;\n  }\n\n  /**\n   * @return [Integer]\n   */\n  @memoize\n  get totalMines() {\n    return this.mines.length;\n  }\n\n  @memoize\n  get mines() {\n    return this.rows.flat().filter((cell) => cell.isMine);\n  }\n\n  /**\n   * Do not follow a branching recursive strategy, since we want to make sure\n   * we are only checking cells one time.\n   *\n   * @param {<GameCell>} todoTop\n   * @param {<GameCell>} currentVisible\n   * @return {<GameCell>}\n   */\n  fetchChainedCells(todoTop, currentVisible) {\n    const cell = todoTop[0];\n    const todo = todoTop.slice(1, todoTop.length);\n\n    if (cell.number === 0) {\n      // Grab all available items around this one\n      const siblings = this.fetchSiblings(cell)\n        .filter(sibling => {\n          return !sibling.isMine &&\n            sibling.number >= 0 &&\n            currentVisible.indexOf(sibling) === -1;\n        });\n\n      const newVisible = [\n        ...currentVisible,\n        ...siblings\n      ];\n      const moreTodo = [\n        ...todo,\n        ...siblings.filter(sibling => sibling.number === 0)\n      ];\n\n      return this._doneFetchChainedCells(moreTodo, newVisible);\n    }\n\n    return this._doneFetchChainedCells(todo, currentVisible);\n  }\n\n  _doneFetchChainedCells(todo, visible) {\n    if (todo.length > 0) {\n      return this.fetchChainedCells(todo, visible);\n    } else {\n      return visible;\n    }\n  }\n\n  // @TODO Immutable\n  /**\n   * @param {GameCell} cell\n   * @return {<GameCell>}\n   */\n  fetchSiblings(cell) {\n    let results = [];\n\n    const { width:w, height:h } = this;\n    const { x, y } = cell;\n\n    const top =    y - 1 < 0     ? 0     : y - 1;\n    const bottom = y + 1 > h - 1 ? h - 1 : y + 1;\n    const left =   x - 1 < 0     ? 0     : x - 1;\n    const right =  x + 1 > w - 1 ? w - 1 : x + 1;\n\n    for (let y2 = top; y2 <= bottom; y2++) {\n      for (let x2 = left; x2 <= right; x2++) {\n        if (y2 !== y || x2 !== x) {\n          results.push(this.rows[y2][x2]);\n        }\n      }\n    }\n\n    return results;\n  }\n}\n","\nfunction clearCell(board, selectedCells, cell) {\n  const newVisible = [\n    ...selectedCells,\n    cell\n  ];\n\n  return board.fetchChainedCells([cell], newVisible);\n}\n\nexport default function clickCell(cell, state) {\n  const { board, selectedCells } = state;\n\n  if (cell.isMine) {\n    return {\n      ...state,\n      gameRunning: false,\n      gameOver: true,\n      gameWon: false,\n      clickedMine: cell // Flag this cell as about to detonate.  The `Game` component will handle the animation\n    };\n\n  } else if (!selectedCells.includes(cell)) {\n    const newCells = clearCell(board, selectedCells, cell);\n\n    if (newCells.length + board.totalMines === board.totalCells) {\n      return {\n        ...state,\n        selectedCells: newCells,\n        gameRunning: false,\n        gameOver: true,\n        gameWon: true\n      }\n\n    } else {\n      return {\n        ...state,\n        gameRunning: true,\n        selectedCells: newCells\n      };\n    }\n  }\n}\n","import GameBoard from '../lib/GameBoard';\nimport { difficulties } from '../lib/difficulties';\nimport clickCell from './click-cell';\nimport flagCell from './flag-cell';\n\nconst RESET_GAME_ACTIONS = [\n  'SET_DIFFICULTY',\n  'RESET_GAME'\n];\n\nfunction stateFilter(state, { type, ...action }) {\n  const {\n    selectedCells,\n  } = state;\n\n  if (RESET_GAME_ACTIONS.includes(type)) {\n    const difficulty = action.difficulty || state.difficulty;\n    const gameParams = difficulties[difficulty];\n\n    if (!difficulty || !gameParams) {\n      return state;\n    }\n\n    const board = difficulty ? new GameBoard(gameParams.height, gameParams.width, gameParams.density) : null;\n\n    return {\n      ...state,\n      gameRunning: false,\n      gameOver: false,\n      gameWon: false,\n      selectedCells: [],\n      flaggedCells: [],\n      exploded: [],\n      clickedMine: null,\n      difficulty,\n      board\n    };\n\n  } else if (type === 'CHAIN_REACTION') {\n    return {\n      ...state,\n      exploded: [\n        ...state.exploded,\n        action.cell\n      ]\n    };\n\n  } else if (type === 'CLICK_CELL') {\n    return clickCell(action.cell, state);\n\n  } else if (type === 'CLICK_FLAG' && !selectedCells.includes(action.cell)) {\n    return flagCell(action.cell, state);\n  }\n\n  return state;\n}\n\nexport default (state = {}, action) => {\n  const result = stateFilter(state, action);\n\n  return result;\n}\n","export default function flagCell(cell, state) {\n  const {\n    flaggedCells\n  } = state;\n\n  if (flaggedCells.includes(cell)) {\n    return {\n      ...state,\n      flaggedCells: flaggedCells.filter(aCell => aCell.id !== cell.id)\n    }\n  } else {\n    return {\n      ...state,\n      flaggedCells: [\n        ...flaggedCells,\n        cell\n      ]\n    }\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducers);\n\nrender((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}