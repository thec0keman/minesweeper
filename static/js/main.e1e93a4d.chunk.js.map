{"version":3,"sources":["lib/color-map.js","components/Cell.js","components/Row.js","components/Timer.js","components/Progress.js","components/Board.js","lib/GameCell.js","lib/generate-cells.js","lib/GameBoard.js","lib/detonator.js","components/Game.js","lib/difficulties.js","components/Difficulty.js","App.js","serviceWorker.js","index.js"],"names":["colorMap","1","2","3","4","5","6","7","8","Cell","props","cell","isVisible","selectedCells","indexOf","isFlagged","flaggedCells","isExploded","exploded","className","icon","flag","onContextMenu","e","flagCell","explode","isMine","bomb","number","colorClass","onClick","clickCell","Row","cells","row","map","x","data-column","key","id","data-row","y","useState","seconds","setSeconds","useEffect","interval","gameRunning","setInterval","gameOver","clearInterval","Progress","length","board","totalCells","totalMines","Board","rows","data-y","Timer","GameCell","this","fetchSiblings","filter","sibling","memoize","generateCell","density","count","Math","floor","random","generateMine","width","GameBoard","height","mines","column","push","generateCells","todoTop","currentVisible","todo","slice","siblings","newVisible","moreTodo","_doneFetchChainedCells","visible","fetchChainedCells","results","y2","x2","flat","Detonator","callback","running","_explode","index","time","mine","remaining","array","left","right","arrWithout","setTimeout","Game","reset","bind","state","_initGame","preventDefault","setState","detonate","clearCells","aCell","revealBoard","detonator","start","stop","chainedCells","React","Component","difficulties","easy","medium","hard","insane","OPTIONS","Object","keys","value","label","str","toUpperCase","Difficulty","options","difficulty","onChange","selection","setDifficulty","window","oncontextmenu","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1e93a4d.chunk.js","sourcesContent":["export const colorMap = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'either'\n};\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCog as explode,\n  faFlag as flag,\n  faBomb as bomb\n} from '@fortawesome/free-solid-svg-icons'\nimport { colorMap } from '../lib/color-map'\n\nexport default function Cell(props) {\n  const cell = props.cell;\n  const isVisible = props.selectedCells.indexOf(cell) > -1;\n  const isFlagged = props.flaggedCells.indexOf(cell) > -1;\n  const isExploded = props.exploded.indexOf(cell) > -1;\n\n  if (isFlagged) {\n    return (\n      <div className=\"cell raised flag\">\n        <FontAwesomeIcon icon={flag} onContextMenu={(e) => { props.flagCell(e, cell) }}/>\n      </div>\n    )\n\n  } else if (!isVisible) {\n    return (\n      <div className=\"cell raised\" onContextMenu={(e) => { props.flagCell(e, cell) }} onClick={(e) => { props.clickCell(e, cell) }}>\n      </div>\n    )\n\n  } else if (isExploded) {\n    return (\n      <div className=\"cell detonate\">\n        <FontAwesomeIcon icon={explode}/>\n      </div>\n    )\n\n  } else if (cell.isMine) {\n    return (\n      <div className=\"cell bomb\">\n        <FontAwesomeIcon icon={bomb}/>\n      </div>\n    )\n\n  } else if (cell.number !== 0) {\n    const colorClass = colorMap[cell.number];\n\n    return (\n      <div className={ 'cell ' + colorClass }>\n      {cell.number}\n      </div>\n    )\n\n  } else {\n    return (\n      <div className=\"cell empty\"/>\n    )\n  }\n}\n","import React from 'react';\nimport Cell from './Cell';\n\nexport default function Row(props) {\n  const cells = props.row.map((cell, x) => {\n    return (\n      <Cell\n        data-column={x}\n        key={cell.id}\n        cell={cell}\n        {...props}\n      />\n    );\n  });\n\n  return (\n    <div data-row={props.y} key={props.y} className='row'>\n      {cells}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function(props) {\n  const [seconds, setSeconds] = useState(1);\n\n  useEffect(() => {\n    let interval = null;\n\n    if (props.gameRunning) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    } else if (props.gameOver) {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, props.gameRunning, props.gameOver]);\n\n  if (props.gameRunning || props.gameOver) {\n    return (\n      <div className='timer'>\n        {seconds}\n      </div>\n    )\n  } else {\n    return <div className='timer-blank'/>\n  }\n}\n","import React from 'react';\n\nexport default function Progress(props) {\n  return (\n    <div className='progress'>\n      <dl>\n        <dt>Cells</dt>\n        <dd>{props.selectedCells.length} / {props.board.totalCells}</dd>\n      </dl>\n      <dl>\n        <dt>Flags</dt>\n        <dd>{props.flaggedCells.length} / {props.board.totalMines}</dd>\n      </dl>\n    </div>\n  )\n}\n","import React from 'react';\nimport Row from './Row';\nimport Timer from './Timer';\nimport Progress from './Progress';\n\nexport default function Board(props) {\n  const board = props.board;\n  const rows = board.rows.map((row, y) => (<Row row={row} data-y={y} key={y} {...props}/>));\n\n  return (\n    <div className='game'>\n      <Progress {...props}/>\n      <Timer gameRunning={props.gameRunning} gameOver={props.gameOver}/>\n\n      <div className='board'>{rows}</div>\n    </div>\n  )\n}\n","import memoize from 'memoize-decorator'\n\nclass GameCell {\n  /**\n   * @param {GameBoard} board\n   * @param {Integer} id\n   * @param {Boolean} isMine\n   * @param {Integer} x\n   * @param {Integer} y\n   */\n  constructor(board, id, isMine, x, y) {\n    this.board = board;\n    this.id = id;\n    this.isMine = isMine;\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * @return {Integer}\n   */\n  @memoize\n  get number() {\n    return this.board.\n      fetchSiblings(this).\n      filter(sibling => sibling.isMine).length;\n  }\n}\n\nexport default GameCell;\n","import GameCell from './GameCell';\n\n// @TODO Ensure that you cannot have any impossible cells\n// @TODO Ensure that you cannot have any 50/50 cells\n// @TODO Immutable\nexport default function generateCells(board) {\n  const mines = [];\n\n  for (let y = 0; y < board.height; y++) {\n    const column = [];\n\n    for (let x = 0; x < board.width; x++) {\n      column.push(generateCell(board, x, y));\n    }\n\n    mines.push(column);\n  }\n\n  return mines;\n}\n\nfunction generateCell(board, x, y) {\n  const isMine = generateMine(board.totalCells, board.density);\n  const id = (y * board.width) + x;\n  const cell = new GameCell(\n    board,\n    id,\n    isMine,\n    x,\n    y\n  )\n\n  return cell;\n}\n\nfunction generateMine(cells, density) {\n  const count = cells / density;\n  const random = Math.floor(Math.random() * count)\n\n  return random === 1;\n}\n","import memoize from 'memoize-decorator'\nimport generateCells from '../lib/generate-cells';\n\nexport default class GameBoard {\n  /**\n   * @param [Integer] height\n   * @param [Integer] width\n   * @param [Integer] density\n   */\n  constructor(height, width, density) {\n    this.height = height;\n    this.width = width;\n    this.density = density;\n    this.rows = generateCells(this);\n  }\n\n  /**\n   * @return [Integer]\n   */\n  @memoize\n  get totalCells() {\n    return this.height * this.width;\n  }\n\n  /**\n   * @return [Integer]\n   */\n  @memoize\n  get totalMines() {\n    return this.mines.length;\n  }\n\n  @memoize\n  get mines() {\n    return this.rows.flat().filter((cell) => cell.isMine);\n  }\n\n  /**\n   * Do not follow a branching recursive strategy, since we want to make sure\n   * we are only checking cells one time.\n   *\n   * @param {<GameCell>} todoTop\n   * @param {<GameCell>} currentVisible\n   * @return {<GameCell>}\n   */\n  fetchChainedCells(todoTop, currentVisible) {\n    const cell = todoTop[0];\n    const todo = todoTop.slice(1, todoTop.length);\n\n    if (cell.number === 0) {\n      // Grab all available items around this one\n      const siblings = this.fetchSiblings(cell).\n        filter(sibling => {\n          return !sibling.isMine &&\n            sibling.number >= 0 &&\n            currentVisible.indexOf(sibling) === -1;\n        })\n\n      const newVisible = [\n        ...currentVisible,\n        ...siblings\n      ];\n      const moreTodo = [\n        ...todo,\n        ...siblings.filter(sibling => sibling.number === 0)\n      ];\n\n      return this._doneFetchChainedCells(moreTodo, newVisible);\n    }\n\n    return this._doneFetchChainedCells(todo, currentVisible);\n  }\n\n  _doneFetchChainedCells(todo, visible) {\n    if (todo.length > 0) {\n      return this.fetchChainedCells(todo, visible);\n    } else {\n      return visible;\n    }\n  }\n\n  // @TODO Immutable\n  /**\n   * @param {GameCell} cell\n   * @return {<GameCell>}\n   */\n  fetchSiblings(cell) {\n    let results = [];\n\n    for (let y2 = cell.y - 1; y2 <= cell.y + 1; y2++) {\n      for (let x2 = cell.x - 1; x2 <= cell.x + 1; x2++) {\n        if (!outOfBounds(y2, x2, this.height, this.width) && !(y2 === cell.y && x2 === cell.x)) {\n          results.push(this.rows[y2][x2]);\n        }\n      }\n    }\n\n    return results;\n  }\n}\n\n/**\n *\n * @param {Integer} y\n * @param {Integer} x\n * @param {Integer} height\n * @param {Integer} width\n * @return {Boolean}\n */\nfunction outOfBounds(y, x, height, width) {\n  return x < 0 ||\n    y < 0 ||\n    x > width - 1 ||\n    y > height - 1;\n}\n","// Too low and the browser will choke on harder difficulties\n// Too high and detonation will take forever\nconst MINE_SPEED = 200;\n\nexport default class Detonator {\n  constructor(mines) {\n    this.mines = mines;\n  }\n\n  start(callback) {\n    this.running = true;\n    this.callback = callback;\n    this._explode(this.mines);\n  }\n\n  _explode(mines) {\n    const index = Math.floor(Math.random() * mines.length);\n    const time = Math.random() * MINE_SPEED;\n    const mine = mines[index];\n    const remaining = arrWithout(mines, index);\n\n    if (this.callback) {\n      this.callback(mine);\n    }\n\n    if (remaining.length > 0 && this.running) {\n      setTimeout(() => {\n        this._explode(remaining);\n      }, time)\n    }\n  }\n\n  stop() {\n    this.running = false;\n    this.callback = null;\n  }\n}\n\nfunction arrWithout(array, index) {\n  let left = [];\n  let right = [];\n\n  if (index !== 0) {\n    left = array.slice(0, index);\n  }\n  if (index !== array.length - 1) {\n    right = array.slice(index + 1, array.length);\n  }\n\n  return [\n    ...left,\n    ...right\n  ];\n}\n","import React from 'react';\nimport Board from './Board';\nimport GameBoard from '../lib/GameBoard';\nimport detonator from '../lib/detonator';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.reset = this.reset.bind(this);\n    this.clickCell = this.clickCell.bind(this);\n    this.flagCell = this.flagCell.bind(this);\n    this.state = this._initGame();\n  }\n\n  _initGame() {\n    const { props } = this;\n\n    return {\n      board: new GameBoard(props.height, props.width, props.density),\n      selectedCells: [],\n      flaggedCells: [],\n      exploded: [],\n      gameRunning: false,\n      gameOver: false\n    };\n  }\n\n  // @TODO Ensure first click is a zero\n  clickCell(e, cell) {\n    e.preventDefault();\n\n    if (this.state.gameOver) {\n      return;\n    } else if (!this.state.gameRunning) {\n      this.setState({ gameRunning: true });\n    }\n\n    if (cell.isMine) {\n      this.detonate(cell);\n    } else if (this.state.selectedCells.indexOf(cell) === -1) {\n      this.clearCells(cell);\n    }\n  }\n\n  flagCell(e, cell) {\n    e.preventDefault();\n\n    if (this.state.selectedCells.indexOf(cell) > -1) {\n      return;\n    }\n\n    if (this.state.flaggedCells.indexOf(cell) > -1) {\n      this.setState({\n        flaggedCells: this.state.flaggedCells.filter(aCell => aCell.id !== cell.id)\n      });\n    } else {\n      this.setState({\n        flaggedCells: [\n          ...this.state.flaggedCells,\n          cell\n        ],\n      });\n    }\n  }\n\n  // @TODO Detonate the minefield\n  detonate(cell) {\n    this.revealBoard()\n    this.setState({\n      exploded: [cell],\n    });\n\n    const board = this.state.board;\n    const explode = (mine) => {\n      this.setState({\n        exploded: [\n          ...this.state.exploded,\n          mine\n        ]\n      });\n    }\n\n    this.detonator = new detonator(board.mines);\n    this.detonator.start(explode);\n  }\n\n  componentWillUnmount() {\n    this.detonator.stop();\n  }\n\n  clearCells(cell) {\n    const board = this.state.board;\n    const newVisible = [\n      ...this.state.selectedCells,\n      cell\n    ];\n    const chainedCells = board.fetchChainedCells([cell], newVisible);\n\n    this.setState({\n      selectedCells: chainedCells\n    });\n\n    if (chainedCells.length + board.totalMines === board.totalCells) {\n      this.revealBoard();\n    }\n  }\n\n  revealBoard() {\n    const board = this.state.board;\n\n    this.setState({\n      gameOver: true,\n      gameRunning: false,\n      selectedCells: board.rows.flat()\n    });\n  }\n\n  reset() {\n    this.setState(this._initGame());\n  }\n\n  render() {\n    return (\n      <section>\n        <button onClick={this.reset}>Start Over</button>\n        <Board\n          board={this.state.board}\n          flagCell={this.flagCell}\n          clickCell={this.clickCell}\n          {...this.state}\n        />\n      </section>\n    )\n  }\n}\n","export const difficulties = {\n  easy: {\n    width: 10,\n    height: 10,\n    density: 10\n  },\n  medium: {\n    width: 30,\n    height: 25,\n    density: 120\n  },\n  hard: {\n    width: 50,\n    height: 30,\n    density: 220\n  },\n  insane: {\n    width: 60,\n    height: 30,\n    density: 350\n  }\n};\n","import React from 'react';\nimport Select from 'react-select';\nimport { difficulties } from '../lib/difficulties';\n\nconst OPTIONS = Object.keys(difficulties).map((key) => ({ value: key, label: uppercase(key) }));\n\nfunction uppercase(str) {\n  return `${ str[0].toUpperCase() }${ str.slice(1) }`;\n}\n\nexport default function Difficulty(props) {\n  return (\n    <div className='difficulty'>\n      <div className='difficulty__selector'>\n        <h3>Select Difficulty</h3>\n        <Select options={OPTIONS} value={props.difficulty} onChange={(selection) => props.setDifficulty(selection.value)}/>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Game from './components/Game';\nimport Difficulty from './components/Difficulty';\nimport { difficulties } from './lib/difficulties';\n\nwindow.oncontextmenu = function ()\n{\n  return false;\n}\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState();\n\n  if (difficulty) {\n    return (\n      <main className='app'>\n        <button onClick={() => setDifficulty() }>Change Difficulty</button>\n        <Game {...difficulties[difficulty]} />\n      </main>\n    );\n  } else {\n    return (\n      <Difficulty setDifficulty={setDifficulty} difficulty={difficulty}/>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}