{"version":3,"sources":["lib/color-map.js","actions/index.js","containers/cell.js","components/Cell.js","components/Row.js","components/Timer.js","components/Progress.js","containers/board.js","components/Board.js","components/Detonator.js","containers/detonator.js","lib/difficulties.js","containers/game.js","components/Game.js","components/Difficulty.js","containers/difficulty.js","App.js","serviceWorker.js","lib/GameCell.js","lib/GameBoard.js","reducers/click-cell.js","reducers/index.js","reducers/flag-cell.js","index.js"],"names":["colorMap","1","2","3","4","5","6","7","8","setDifficulty","difficulty","type","connect","selectedCells","flaggedCells","exploded","gameOver","cell","isVisible","includes","isFlagged","isExploded","dispatch","flagCell","e","preventDefault","clickCell","data-test-detonated","className","icon","explode","data-test-flagged","onContextMenu","flag","isMine","data-test-visible-mine","bomb","number","colorClass","data-test-visible","data-test-empty","data-test-hidden","onClick","Row","props","cells","row","map","x","data-column","key","id","data-row","y","gameRunning","gameWon","useState","seconds","setSeconds","useEffect","interval","setInterval","clearInterval","classes","Progress","board","length","totalCells","totalMines","message","rows","data-y","Timer","MINE_SPEED","easy","medium","hard","insane","clickedMine","chainReaction","mines","remaining","setRemaining","clicked","distance","Math","hypot","sort","a","b","prepareMines","mine","nextGroup","nextMineTime","random","difficulties","width","height","density","validDifficulties","Object","keys","resetGame","history","setDifficultyFromUrl","value","goHome","push","difficultyFromUrl","useParams","OPTIONS","label","str","toUpperCase","slice","style","textAlign","options","onChange","App","path","component","Game","Difficulty","Boolean","window","location","hostname","match","fetchSiblings","h","w","bottom","left","right","genCells","y2","x2","genRows","flat","generateNumbers","generateNumber","filter","sibling","generateCell","count","floor","generateMine","generateBoard","column","generateCells","fetchChainedCells","todoTop","currentVisible","todo","siblings","indexOf","newVisible","_doneFetchChainedCells","visible","state","newCells","clearCell","RESET_GAME_ACTIONS","stateFilter","action","gameParams","aCell","store","createStore","result","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d864d242.chunk.js","sourcesContent":["export const colorMap = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'eight'\n};\n","export function clickCell(cell) {\n  return {\n    type: 'CLICK_CELL',\n    cell\n  };\n}\n\nexport function flagCell(cell) {\n  return {\n    type: 'CLICK_FLAG',\n    cell\n  };\n}\n\nexport function resetGame() {\n  return {\n    type: 'RESET_GAME'\n  }\n}\n\nexport function setDifficulty(difficulty) {\n  return {\n    type: 'SET_DIFFICULTY',\n    difficulty\n  };\n}\n\nexport function chainReaction(cell) {\n  return {\n    type: 'CHAIN_REACTION',\n    cell\n  };\n}\n","import { connect } from 'react-redux'\nimport Cell from '../components/Cell'\nimport { clickCell, flagCell } from '../actions'\n\nconst mapStateToProps = ({ selectedCells, flaggedCells, exploded, gameOver }, { cell }) => {\n  return {\n    isVisible: gameOver || selectedCells.includes(cell),\n    isFlagged: flaggedCells.includes(cell),\n    isExploded: exploded.includes(cell),\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  flagCell: (e, cell) => {\n    e.preventDefault();\n\n    return dispatch(flagCell(cell));\n  },\n\n  clickCell: (e, cell) => {\n    e.preventDefault();\n\n    return dispatch(clickCell(cell));\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Cell)\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCog as explode,\n  faFlag as flag,\n  faBomb as bomb\n} from '@fortawesome/free-solid-svg-icons'\nimport { colorMap } from '../lib/color-map'\n\nexport default function Cell({ cell, isFlagged, isVisible, isExploded, flagCell, clickCell }) {\n  if (isExploded) {\n    return (\n      <div data-test-detonated className=\"cell detonate\">\n        <FontAwesomeIcon icon={explode}/>\n      </div>\n    )\n\n  } else if (isFlagged) {\n    return (\n      <div data-test-flagged className=\"cell raised flag\"  onContextMenu={(e) => { flagCell(e, cell) }}>\n        <FontAwesomeIcon icon={flag}/>\n      </div>\n    )\n\n  } else if (!isVisible) {\n    return (\n      <div data-test-hidden className=\"cell raised\" onContextMenu={(e) => { flagCell(e, cell) }} onClick={(e) => { clickCell(e, cell) }}>\n      </div>\n    )\n\n  } else if (cell.isMine) {\n    return (\n      <div data-test-visible-mine className=\"cell bomb\">\n        <FontAwesomeIcon icon={bomb}/>\n      </div>\n    )\n\n  } else if (cell.number !== 0) {\n    const colorClass = colorMap[cell.number];\n\n    return (\n      <div data-test-visible className={ 'cell ' + colorClass }>\n        {cell.number}\n      </div>\n    )\n\n  } else {\n    return (\n      <div data-test-empty className=\"cell empty\"/>\n    )\n  }\n}\n","import React from 'react';\nimport Cell from '../containers/cell';\n\nexport default function Row(props) {\n  const cells = props.row.map((cell, x) => {\n    return (\n      <Cell\n        data-column={x}\n        key={cell.id}\n        cell={cell}\n      />\n    );\n  });\n\n  return (\n    <div data-row={props.y} key={props.y} className='row'>\n      {cells}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function({ gameRunning, gameOver, gameWon }) {\n  const [seconds, setSeconds] = useState(1);\n\n  useEffect(() => {\n    // Use `setInterval` so that if this component tears down mid-tick, we can stop\n    // the next tick.\n    let interval = null;\n\n    if (gameRunning) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  });\n\n  const classes = gameWon ? 'timer won' : 'timer';\n\n  if (gameRunning || gameOver) {\n    return (\n      <div className={classes}>\n        {seconds}\n      </div>\n    )\n  } else {\n    return <div className='timer-blank'/>\n  }\n}\n","import React from 'react';\n\nexport default function Progress({ selectedCells, flaggedCells, board }) {\n  return (\n    <div className='progress'>\n      <dl>\n        <dt>Cells</dt>\n        <dd>{selectedCells.length} / {board.totalCells}</dd>\n      </dl>\n      <dl>\n        <dt>Flags</dt>\n        <dd>{flaggedCells.length} / {board.totalMines}</dd>\n      </dl>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport Board from '../components/Board'\n\nconst mapStateToProps = ({ board, gameRunning, gameOver, gameWon, selectedCells, flaggedCells }) => ({\n  board,\n  gameRunning,\n  gameOver,\n  gameWon,\n  selectedCells,\n  flaggedCells\n})\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Board)\n","import React from 'react';\nimport Row from './Row';\nimport Timer from './Timer';\nimport Progress from './Progress';\n\nexport default function Board({ board, gameRunning, gameOver, gameWon, selectedCells, flaggedCells }) {\n  const rows = board\n    .rows\n    .map((row, y) => (\n      <Row row={row} data-y={y} key={y} />\n    ));\n\n  let message;\n\n  if (gameOver && gameWon) {\n    message = 'Congratulations, you win!';\n  } else if (gameOver) {\n    message = 'Sorry, please try again :(';\n  }\n\n  return (\n    <div className='game'>\n      <Progress selectedCells={selectedCells} flaggedCells={flaggedCells} board={board}/>\n      <Timer gameRunning={gameRunning} gameOver={gameOver} gameWon={gameWon}/>\n\n      <div className='board'>{rows}</div>\n      <p>{message}</p>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react';\n\n// Too low and the browser will choke on harder difficulties\n// Too high and detonation will take forever\n// const MINE_SPEED = 190;\n// const MINE_SPEED = 90;\n// const MINE_SPEED = 20;\nconst MINE_SPEED = {\n  easy: 190,\n  medium: 90,\n  hard: 20,\n  insane: 5\n};\n\nexport default function({ board, clickedMine, chainReaction }) {\n  const { mines, difficulty } = board;\n  const [remaining, setRemaining] = useState([]);\n\n  // This effect triggers the detonation.\n  useEffect(() => {\n    if (clickedMine) {\n      setRemaining(prepareMines(mines, clickedMine));\n    }\n  }, [clickedMine]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Detonation effect.  Will abort if `clickedMine` is unset.\n  useEffect(() => {\n    if (!clickedMine || remaining.length === 0) {\n      return;\n    }\n\n    const [mine, ...nextGroup] = remaining;\n\n    chainReaction(mine.cell);\n\n    if (nextGroup.length > 0) {\n      let interval;\n      const nextMineTime = Math.random() * MINE_SPEED[difficulty] // / mines.length;\n\n      interval = setInterval(() => {\n        setRemaining(nextGroup);\n      }, nextMineTime)\n\n      return () => clearInterval(interval);\n    }\n  }, [remaining, clickedMine]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (null);\n}\n\n// Calculates distances for each mine in the field from the clicked mine, and sorts\n// the mines based on their distance from the clicked mine.\n// Not for larger boards this can result in some initial latency\nfunction prepareMines(mines, clicked) {\n  return mines.map(cell => {\n    const distance = Math.hypot(cell.x - clicked.x, cell.y - clicked.y);\n\n    return {\n      distance, cell\n    };\n  }).sort((a, b) => a.distance - b.distance);\n}\n","import { connect } from 'react-redux'\nimport Detonator from '../components/Detonator'\nimport { chainReaction } from '../actions';\n\nconst mapStateToProps = ({ board, clickedMine }) => ({\n  board,\n  clickedMine,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  chainReaction: (cell) => dispatch(chainReaction(cell)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Detonator)\n","export const difficulties = {\n  easy: {\n    width: 10,\n    height: 10,\n    density: 10\n  },\n  medium: {\n    width: 30,\n    height: 25,\n    density: 120\n  },\n  hard: {\n    width: 50,\n    height: 30,\n    density: 220\n  },\n  insane: {\n    width: 60,\n    height: 30,\n    density: 350\n  }\n};\n\nexport const validDifficulties = Object.keys(difficulties);\n","import { connect } from 'react-redux'\nimport Game from '../components/Game'\nimport { resetGame, setDifficulty } from '../actions';\nimport { validDifficulties } from '../lib/difficulties';\n\nconst mapStateToProps = ({ difficulty, resetGame }, { history }) => ({\n  difficulty,\n  resetGame,\n  history\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame: () => dispatch(resetGame()),\n\n  setDifficultyFromUrl: (value) => {\n    if (validDifficulties.includes(value)) {\n      dispatch(setDifficulty(value));\n      return true;\n    }\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game)\n","import Board from '../containers/board';\nimport Detonator from '../containers/detonator';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function Game({ resetGame, difficulty, history, setDifficultyFromUrl }) {\n  const goHome = () => history.push('/');\n  const { difficulty: difficultyFromUrl } = useParams();\n\n  if (!difficulty) {\n    if (!setDifficultyFromUrl(difficultyFromUrl)) {\n      goHome();\n    }\n\n    return (null);\n  }\n\n  return (\n    <section>\n      <button onClick={goHome}>Change Difficulty</button>\n      <button onClick={resetGame}>Start Over</button>\n      <Board/>\n      <Detonator/>\n    </section>\n  )\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport { difficulties } from '../lib/difficulties';\n\nconst OPTIONS = Object.keys(difficulties)\n  .map((key) => ({\n    value: key,\n    label: uppercase(key)\n  }));\n\nfunction uppercase(str) {\n  return `${ str[0].toUpperCase() }${ str.slice(1) }`;\n}\n\nexport default function Difficulty({ difficulty, setDifficulty }) {\n  return (\n    <div className='difficulty'>\n      <div className='difficulty__selector' style={{textAlign: 'left'}}>\n        <h3>Select Difficulty</h3>\n        <Select options={OPTIONS} onChange={setDifficulty}/>\n      </div>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport { setDifficulty } from '../actions'\nimport Difficulty from '../components/Difficulty'\nimport { validDifficulties } from '../lib/difficulties';\n\nconst mapDispatchToProps = (dispatch, { history }) => ({\n  setDifficulty: ({ value }) => {\n    dispatch(setDifficulty(value));\n\n    if (validDifficulties.includes(value)) {\n      history.push(`/${ value }`);\n    }\n  }\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Difficulty)\n","import React from 'react';\nimport './App.scss';\nimport Game from './containers/game';\nimport Difficulty from './containers/difficulty';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <main className='app'>\n      <Router>\n        <Switch>\n          <Route path='/:difficulty' component={Game}/>\n          <Route path='/' component={Difficulty}/>\n        </Switch>\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @param {GameCell} cell\n * @return {<GameCell>}\n */\nexport function fetchSiblings({ height: h, width: w, rows }, cell) {\n  const { x, y } = cell;\n\n  const top =    y - 1 < 0     ? 0     : y - 1;\n  const bottom = y + 1 > h - 1 ? h - 1 : y + 1;\n  const left =   x - 1 < 0     ? 0     : x - 1;\n  const right =  x + 1 > w - 1 ? w - 1 : x + 1;\n\n  const genCells = (y2, x2, row) => {\n    if (x2 > right) {\n      return row;\n    } else if (x2 === x && y2 === y) {\n      return genCells(y2, x2 + 1, row);\n    } else {\n      return genCells(y2, x2 + 1, [\n        ...row,\n        rows[y2][x2]\n      ]);\n    }\n  }\n\n  const genRows = (y2, rows) => {\n    if (y2 > bottom) {\n      return rows;\n    } else {\n      return genRows(y2 + 1, [\n        ...rows,\n        genCells(y2, left, [])\n      ]);\n    }\n  }\n\n  return genRows(top, []).flat();\n\n  // @TODO Benchmark\n  // const results = []\n  // for (let y2 = top; y2 <= bottom; y2++) {\n  //   for (let x2 = left; x2 <= right; x2++) {\n  //     if (y2 !== y || x2 !== x) {\n  //       results.push(rows[y2][x2]);\n  //     }\n  //   }\n  // }\n\n  // return results;\n}\n\nexport function generateNumbers(rows) {\n  const height = rows.length;\n  const width = rows[0].length;\n\n  const generateNumber = (cell) => {\n    if (cell.isMine) {\n      return '!'\n    } else {\n      const siblings = fetchSiblings({\n        height,\n        width,\n        rows\n      }, cell);\n\n      return siblings.filter(sibling => sibling.isMine).length;\n    }\n  }\n\n  return rows.map(row => row.map(cell => ({\n    ...cell,\n    number: generateNumber(cell)\n  })));\n}\n\nexport function generateCell(totalCells, width, density, x, y, isMine = generateMine(totalCells, density)) {\n  const id = (y * width) + x;\n\n  return {\n    id,\n    isMine,\n    x,\n    y\n  }\n}\n\nfunction generateMine(cells, density) {\n  const count = cells / density;\n  const random = Math.floor(Math.random() * count)\n\n  return random === 1;\n}\n","import { fetchSiblings, generateCell, generateNumbers } from './GameCell';\n\n/**\n * @param [Integer] height\n * @param [Integer] width\n * @param [Integer] density\n */\nexport function generateBoard(height, width, density, difficulty) {\n  const rows = generateCells(height, width, density);\n  const mines = rows.flat().filter((cell) => cell.isMine);\n\n  return {\n    height,\n    width,\n    density,\n    difficulty,\n    rows,\n    mines,\n    totalCells: height * width,\n    totalMines: mines.length\n  };\n}\n\n/**\n * Do not follow a branching recursive strategy, since we want to make sure\n * we are only checking cells one time.\n *\n * @param {<GameCell>} todoTop\n * @param {<GameCell>} currentVisible\n * @return {<GameCell>}\n */\nexport function fetchChainedCells(board, todoTop, currentVisible) {\n  const [cell, ...todo] = todoTop;\n\n  if (cell.number === 0) {\n    // Grab all available items around this one\n    const siblings = fetchSiblings(board, cell)\n      .filter(sibling => {\n        return !sibling.isMine &&\n          sibling.number >= 0 &&\n          currentVisible.indexOf(sibling) === -1;\n      });\n\n    const newVisible = [\n      ...currentVisible,\n      ...siblings\n    ];\n    const moreTodo = [\n      ...todo,\n      ...siblings.filter(sibling => sibling.number === 0)\n    ];\n\n    return _doneFetchChainedCells(board, moreTodo, newVisible);\n  }\n\n  return _doneFetchChainedCells(board, todo, currentVisible);\n}\n\nfunction _doneFetchChainedCells(board, todo, visible) {\n  if (todo.length > 0) {\n    return fetchChainedCells(board, todo, visible);\n  } else {\n    return visible;\n  }\n}\n\n// @TODO Ensure that you cannot have any impossible cells\n// @TODO Ensure that you cannot have any 50/50 cells\n// @TODO Immutable\nfunction generateCells(height, width, density) {\n  const cells = [];\n  const totalCells = width * height;\n\n  for (let y = 0; y < height; y++) {\n    const column = [];\n\n    for (let x = 0; x < width; x++) {\n      column.push(generateCell(totalCells, width, density, x, y));\n    }\n\n    cells.push(column);\n  }\n\n  return generateNumbers(cells);\n}\n","import { fetchChainedCells } from '../lib/GameBoard';\n\nfunction clearCell(board, selectedCells, cell) {\n  const newVisible = [\n    ...selectedCells,\n    cell\n  ];\n\n  return fetchChainedCells(board, [cell], newVisible);\n}\n\nexport default function clickCell(cell, state) {\n  const { board, selectedCells } = state;\n\n  if (cell.isMine) {\n    return {\n      ...state,\n      gameRunning: false,\n      gameOver: true,\n      gameWon: false,\n      clickedMine: cell // Flag this cell as about to detonate.  The `Game` component will handle the animation\n    };\n\n  } else if (!selectedCells.includes(cell)) {\n    const newCells = clearCell(board, selectedCells, cell);\n\n    if (newCells.length + board.totalMines === board.totalCells) {\n      return {\n        ...state,\n        selectedCells: newCells,\n        gameRunning: false,\n        gameOver: true,\n        gameWon: true\n      }\n\n    } else {\n      return {\n        ...state,\n        gameRunning: true,\n        selectedCells: newCells\n      };\n    }\n  }\n}\n","import { generateBoard } from '../lib/GameBoard';\nimport { difficulties } from '../lib/difficulties';\nimport clickCell from './click-cell';\nimport flagCell from './flag-cell';\n\nconst RESET_GAME_ACTIONS = [\n  'SET_DIFFICULTY',\n  'RESET_GAME'\n];\n\nfunction stateFilter(state, { type, ...action }) {\n  const {\n    selectedCells,\n  } = state;\n\n  if (RESET_GAME_ACTIONS.includes(type)) {\n    const difficulty = action.difficulty || state.difficulty;\n    const gameParams = difficulties[difficulty];\n\n    if (!difficulty || !gameParams) {\n      return state;\n    }\n\n    const board = difficulty ? generateBoard(gameParams.height, gameParams.width, gameParams.density, difficulty) : null;\n\n    return {\n      ...state,\n      gameRunning: false,\n      gameOver: false,\n      gameWon: false,\n      selectedCells: [],\n      flaggedCells: [],\n      exploded: [],\n      clickedMine: null,\n      difficulty,\n      board\n    };\n\n  } else if (type === 'CHAIN_REACTION') {\n    return {\n      ...state,\n      exploded: [\n        ...state.exploded,\n        action.cell\n      ]\n    };\n\n  } else if (type === 'CLICK_CELL') {\n    return clickCell(action.cell, state);\n\n  } else if (type === 'CLICK_FLAG' && !selectedCells.includes(action.cell)) {\n    return flagCell(action.cell, state);\n  }\n\n  return state;\n}\n\nexport default (state = {}, action) => {\n  const result = stateFilter(state, action);\n\n  return result;\n}\n","export default function flagCell(cell, state) {\n  const {\n    flaggedCells\n  } = state;\n\n  if (flaggedCells.includes(cell)) {\n    return {\n      ...state,\n      flaggedCells: flaggedCells.filter(aCell => aCell.id !== cell.id)\n    }\n  } else {\n    return {\n      ...state,\n      flaggedCells: [\n        ...flaggedCells,\n        cell\n      ]\n    }\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducers);\n\nrender((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}