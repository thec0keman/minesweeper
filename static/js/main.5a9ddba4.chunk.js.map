{"version":3,"sources":["actions/index.js","lib/difficulties.js","components/Difficulty.js","containers/difficulty.js","lib/color-map.js","containers/cell.js","components/Cell.js","components/Row.js","components/Timer.js","components/Progress.js","containers/board.js","components/Board.js","lib/detonator.js","components/Game.js","containers/game.js","App.js","serviceWorker.js","lib/GameCell.js","lib/generate-cells.js","lib/GameBoard.js","reducers/click-cell.js","reducers/index.js","reducers/flag-cell.js","index.js"],"names":["clickCell","cell","type","flagCell","resetGame","clearDifficutly","difficulties","easy","width","height","density","medium","hard","insane","OPTIONS","Object","keys","map","key","value","label","str","toUpperCase","slice","connect","dispatch","setDifficulty","difficulty","className","style","textAlign","options","onChange","colorMap","1","2","3","4","5","6","7","8","state","ownProps","selectedCells","flaggedCells","exploded","gameOver","isVisible","includes","isFlagged","isExploded","e","preventDefault","icon","flag","onContextMenu","explode","isMine","bomb","number","colorClass","onClick","Row","props","cells","row","x","data-column","id","data-row","y","gameRunning","gameWon","useState","seconds","setSeconds","useEffect","interval","setInterval","clearInterval","classes","Progress","message","board","length","totalCells","totalMines","rows","data-y","Timer","Detonator","mines","this","callback","running","_explode","index","Math","floor","random","time","mine","remaining","array","left","right","arrWithout","setTimeout","Game","detonator","start","chainReaction","stop","clearDifficulty","detonate","React","Component","window","oncontextmenu","App","Boolean","location","hostname","match","GameCell","fetchSiblings","filter","sibling","memoize","generateCell","count","generateMine","GameBoard","column","push","generateCells","todoTop","currentVisible","todo","siblings","indexOf","newVisible","moreTodo","_doneFetchChainedCells","visible","fetchChainedCells","results","y2","x2","flat","newCells","clearCell","RESET_GAME_ACTIONS","stateFilter","action","gameParams","aCell","store","createStore","result","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a9ddba4.chunk.js","sourcesContent":["export function clickCell(cell) {\n  return {\n    type: 'CLICK_CELL',\n    cell\n  };\n}\n\nexport function flagCell(cell) {\n  return {\n    type: 'CLICK_FLAG',\n    cell\n  };\n}\n\nexport function resetGame(clearDifficutly = false) {\n  return {\n    type: 'RESET_GAME',\n    clearDifficutly\n  }\n}\n\nexport function setDifficulty(difficulty) {\n  return {\n    type: 'SET_DIFFICULTY',\n    difficulty\n  };\n}\n\nexport function chainReaction(cell) {\n  return {\n    type: 'CHAIN_REACTION',\n    cell\n  };\n}\n","export const difficulties = {\n  easy: {\n    width: 10,\n    height: 10,\n    density: 10\n  },\n  medium: {\n    width: 30,\n    height: 25,\n    density: 120\n  },\n  hard: {\n    width: 50,\n    height: 30,\n    density: 220\n  },\n  insane: {\n    width: 60,\n    height: 30,\n    density: 350\n  }\n};\n","import React from 'react';\nimport Select from 'react-select';\nimport { difficulties } from '../lib/difficulties';\n\nconst OPTIONS = Object.keys(difficulties).map((key) => ({ value: key, label: uppercase(key) }));\n\nfunction uppercase(str) {\n  return `${ str[0].toUpperCase() }${ str.slice(1) }`;\n}\n\nexport default function Difficulty({ difficulty, setDifficulty }) {\n  return (\n    <div className='difficulty'>\n      <div className='difficulty__selector' style={{textAlign: 'left'}}>\n        <h3>Select Difficulty</h3>\n        <Select options={OPTIONS} onChange={setDifficulty}/>\n      </div>\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport { setDifficulty } from '../actions'\nimport Difficulty from '../components/Difficulty'\n\nconst mapDispatchToProps = (dispatch) => ({\n  setDifficulty: ({ value }) => dispatch(setDifficulty(value))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Difficulty)\n","export const colorMap = {\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'either'\n};\n","import { connect } from 'react-redux'\nimport Cell from '../components/Cell'\nimport { clickCell, flagCell } from '../actions'\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    selectedCells,\n    flaggedCells,\n    exploded,\n    gameOver\n  } = state;\n  const {\n    cell\n  } = ownProps;\n\n  return {\n    isVisible: gameOver || selectedCells.includes(cell),\n    isFlagged: flaggedCells.includes(cell),\n    isExploded: exploded.includes(cell),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  flagCell: (e, cell) => {\n    e.preventDefault();\n\n    return dispatch(flagCell(cell));\n  },\n  clickCell: (e, cell) => {\n    e.preventDefault();\n\n    return dispatch(clickCell(cell));\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Cell)\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCog as explode,\n  faFlag as flag,\n  faBomb as bomb\n} from '@fortawesome/free-solid-svg-icons'\nimport { colorMap } from '../lib/color-map'\n\nexport default function Cell({ cell, isFlagged, isVisible, isExploded, flagCell, clickCell }) {\n  if (isFlagged) {\n    return (\n      <div className=\"cell raised flag\">\n        <FontAwesomeIcon icon={flag} onContextMenu={(e) => { flagCell(e, cell) }}/>\n      </div>\n    )\n\n  } else if (!isVisible) {\n    return (\n      <div className=\"cell raised\" onContextMenu={(e) => { flagCell(e, cell) }} onClick={(e) => { clickCell(e, cell) }}>\n      </div>\n    )\n\n  } else if (isExploded) {\n    return (\n      <div className=\"cell detonate\">\n        <FontAwesomeIcon icon={explode}/>\n      </div>\n    )\n\n  } else if (cell.isMine) {\n    return (\n      <div className=\"cell bomb\">\n        <FontAwesomeIcon icon={bomb}/>\n      </div>\n    )\n\n  } else if (cell.number !== 0) {\n    const colorClass = colorMap[cell.number];\n\n    return (\n      <div className={ 'cell ' + colorClass }>\n        {cell.number}\n      </div>\n    )\n\n  } else {\n    return (\n      <div className=\"cell empty\"/>\n    )\n  }\n}\n","import React from 'react';\nimport Cell from '../containers/cell';\n\nexport default function Row(props) {\n  const cells = props.row.map((cell, x) => {\n    return (\n      <Cell\n        data-column={x}\n        key={cell.id}\n        cell={cell}\n      />\n    );\n  });\n\n  return (\n    <div data-row={props.y} key={props.y} className='row'>\n      {cells}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function({ gameRunning, gameOver, gameWon }) {\n  const [seconds, setSeconds] = useState(1);\n\n  useEffect(() => {\n    let interval = null;\n\n    if (gameRunning) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    } else if (gameOver) {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval);\n  }, [seconds, gameRunning, gameOver]);\n\n  const classes = gameWon ? 'timer won' : 'timer';\n\n  if (gameRunning || gameOver) {\n    return (\n      <div className={classes}>\n        {seconds}\n      </div>\n    )\n  } else {\n    return <div className='timer-blank'/>\n  }\n}\n","import React from 'react';\n\nexport default function Progress({ selectedCells, flaggedCells, board, gameWon, gameOver }) {\n  let message;\n\n  if (gameOver && gameWon) {\n    message = <div>Congratulations, you win!</div>\n  } else if (gameOver) {\n    message = <div>Sorry, please try again :(</div>\n  }\n\n  return (\n    <div className='progress'>\n      <dl>\n        <dt>Cells</dt>\n        <dd>{selectedCells.length} / {board.totalCells}</dd>\n      </dl>\n      <dl>\n        <dt>Flags</dt>\n        <dd>{flaggedCells.length} / {board.totalMines}</dd>\n      </dl>\n      {message}\n    </div>\n  )\n}\n","import { connect } from 'react-redux'\nimport Board from '../components/Board'\nimport { clickCell, flagCell } from '../actions';\n\nconst mapStateToProps = ({ board, gameRunning, gameOver, gameWon, selectedCells, flaggedCells }) => ({\n  board,\n  gameRunning,\n  gameOver,\n  gameWon,\n  selectedCells,\n  flaggedCells\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  clickCell: (e, cell) => {\n    e.preventDefault();\n    return clickCell(cell);\n  },\n\n  flagCell: (e, cell) => {\n    e.preventDefault();\n    return flagCell(cell);\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Board)\n","import React from 'react';\nimport Row from './Row';\nimport Timer from './Timer';\nimport Progress from './Progress';\n\nexport default function Board({ board, gameRunning, gameOver, gameWon, selectedCells, flaggedCells }) {\n  const rows = board.\n    rows.\n    map((row, y) => (\n      <Row row={row} data-y={y} key={y} />\n    ));\n\n  return (\n    <div className='game'>\n      <Progress selectedCells={selectedCells} flaggedCells={flaggedCells} gameWon={gameWon} gameOver={gameOver} board={board}/>\n      <Timer gameRunning={gameRunning} gameOver={gameOver} gameWon={gameWon}/>\n\n      <div className='board'>{rows}</div>\n    </div>\n  )\n}\n","// Too low and the browser will choke on harder difficulties\n// Too high and detonation will take forever\nconst MINE_SPEED = 200;\n\nexport default class Detonator {\n  constructor(mines) {\n    this.mines = mines;\n  }\n\n  start(callback) {\n    this.running = true;\n    this.callback = callback;\n    this._explode(this.mines);\n  }\n\n  _explode(mines) {\n    const index = Math.floor(Math.random() * mines.length);\n    const time = Math.random() * MINE_SPEED;\n    const mine = mines[index];\n    const remaining = arrWithout(mines, index);\n\n    if (this.callback) {\n      this.callback(mine);\n    }\n\n    if (remaining.length > 0 && this.running) {\n      setTimeout(() => {\n        this._explode(remaining);\n      }, time)\n    }\n  }\n\n  stop() {\n    this.running = false;\n    this.callback = null;\n  }\n}\n\nfunction arrWithout(array, index) {\n  let left = [];\n  let right = [];\n\n  if (index !== 0) {\n    left = array.slice(0, index);\n  }\n  if (index !== array.length - 1) {\n    right = array.slice(index + 1, array.length);\n  }\n\n  return [\n    ...left,\n    ...right\n  ];\n}\n","import React from 'react';\nimport Difficulty from '../containers/difficulty';\nimport Board from '../containers/board';\nimport detonator from '../lib/detonator';\n\nexport default class Game extends React.Component {\n  detonate(cell) {\n    const board = this.props.board;\n    const explode = (mine) => {\n      this.props.chainReaction(mine)\n    }\n\n    this.detonator = new detonator(board.mines);\n    this.detonator.start(explode);\n  }\n\n  componentWillUnmount() {\n    this.detonator.stop();\n  }\n\n  render() {\n    const {\n      difficulty,\n      clearDifficulty,\n      resetGame,\n      detonate\n    } = this.props;\n\n    if (detonate) {\n      this.detonate(detonate);\n    }\n\n    if (!!difficulty) {\n      return (\n        <section>\n          <button onClick={clearDifficulty}>Change Difficulty</button>\n          <button onClick={resetGame}>Start Over</button>\n          <Board/>\n        </section>\n      )\n    } else {\n      return (\n        <Difficulty/>\n      )\n    }\n  }\n}\n","import { connect } from 'react-redux'\nimport Game from '../components/Game'\nimport { resetGame, chainReaction } from '../actions';\n\nconst mapStateToProps = ({ difficulty, resetGame, board, detonate }) => ({ difficulty, resetGame, board, detonate });\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame: () => dispatch(resetGame()),\n\n  clearDifficulty: () => dispatch(resetGame(true)),\n\n  chainReaction: (cell) => dispatch(chainReaction(cell))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game)\n","import React from 'react';\nimport './App.scss';\nimport Game from './containers/game';\n\nwindow.oncontextmenu = function ()\n{\n  return false;\n}\n\nfunction App() {\n  return (\n    <main className='app'>\n      <Game/>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import memoize from 'memoize-decorator'\n\nclass GameCell {\n  /**\n   * @param {GameBoard} board\n   * @param {Integer} id\n   * @param {Boolean} isMine\n   * @param {Integer} x\n   * @param {Integer} y\n   */\n  constructor(board, id, isMine, x, y) {\n    this.board = board;\n    this.id = id;\n    this.isMine = isMine;\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * @return {Integer}\n   */\n  @memoize\n  get number() {\n    return this.board.\n      fetchSiblings(this).\n      filter(sibling => sibling.isMine).length;\n  }\n}\n\nexport default GameCell;\n","import GameCell from './GameCell';\n\n// @TODO Ensure that you cannot have any impossible cells\n// @TODO Ensure that you cannot have any 50/50 cells\n// @TODO Immutable\nexport default function generateCells(board) {\n  const mines = [];\n\n  for (let y = 0; y < board.height; y++) {\n    const column = [];\n\n    for (let x = 0; x < board.width; x++) {\n      column.push(generateCell(board, x, y));\n    }\n\n    mines.push(column);\n  }\n\n  return mines;\n}\n\nfunction generateCell(board, x, y) {\n  const isMine = generateMine(board.totalCells, board.density);\n  const id = (y * board.width) + x;\n  const cell = new GameCell(\n    board,\n    id,\n    isMine,\n    x,\n    y\n  )\n\n  return cell;\n}\n\nfunction generateMine(cells, density) {\n  const count = cells / density;\n  const random = Math.floor(Math.random() * count)\n\n  return random === 1;\n}\n","import memoize from 'memoize-decorator'\nimport generateCells from '../lib/generate-cells';\n\nexport default class GameBoard {\n  /**\n   * @param [Integer] height\n   * @param [Integer] width\n   * @param [Integer] density\n   */\n  constructor(height, width, density) {\n    this.height = height;\n    this.width = width;\n    this.density = density;\n    this.rows = generateCells(this);\n  }\n\n  /**\n   * @return [Integer]\n   */\n  @memoize\n  get totalCells() {\n    return this.height * this.width;\n  }\n\n  /**\n   * @return [Integer]\n   */\n  @memoize\n  get totalMines() {\n    return this.mines.length;\n  }\n\n  @memoize\n  get mines() {\n    return this.rows.flat().filter((cell) => cell.isMine);\n  }\n\n  /**\n   * Do not follow a branching recursive strategy, since we want to make sure\n   * we are only checking cells one time.\n   *\n   * @param {<GameCell>} todoTop\n   * @param {<GameCell>} currentVisible\n   * @return {<GameCell>}\n   */\n  fetchChainedCells(todoTop, currentVisible) {\n    const cell = todoTop[0];\n    const todo = todoTop.slice(1, todoTop.length);\n\n    if (cell.number === 0) {\n      // Grab all available items around this one\n      const siblings = this.fetchSiblings(cell).\n        filter(sibling => {\n          return !sibling.isMine &&\n            sibling.number >= 0 &&\n            currentVisible.indexOf(sibling) === -1;\n        })\n\n      const newVisible = [\n        ...currentVisible,\n        ...siblings\n      ];\n      const moreTodo = [\n        ...todo,\n        ...siblings.filter(sibling => sibling.number === 0)\n      ];\n\n      return this._doneFetchChainedCells(moreTodo, newVisible);\n    }\n\n    return this._doneFetchChainedCells(todo, currentVisible);\n  }\n\n  _doneFetchChainedCells(todo, visible) {\n    if (todo.length > 0) {\n      return this.fetchChainedCells(todo, visible);\n    } else {\n      return visible;\n    }\n  }\n\n  // @TODO Immutable\n  /**\n   * @param {GameCell} cell\n   * @return {<GameCell>}\n   */\n  fetchSiblings(cell) {\n    let results = [];\n\n    for (let y2 = cell.y - 1; y2 <= cell.y + 1; y2++) {\n      for (let x2 = cell.x - 1; x2 <= cell.x + 1; x2++) {\n        if (!outOfBounds(y2, x2, this.height, this.width) && !(y2 === cell.y && x2 === cell.x)) {\n          results.push(this.rows[y2][x2]);\n        }\n      }\n    }\n\n    return results;\n  }\n}\n\n/**\n *\n * @param {Integer} y\n * @param {Integer} x\n * @param {Integer} height\n * @param {Integer} width\n * @return {Boolean}\n */\nfunction outOfBounds(y, x, height, width) {\n  return x < 0 ||\n    y < 0 ||\n    x > width - 1 ||\n    y > height - 1;\n}\n","\nfunction clearCell(board, selectedCells, cell) {\n  const newVisible = [\n    ...selectedCells,\n    cell\n  ];\n  const chainedCells = board.fetchChainedCells([cell], newVisible);\n\n  return chainedCells;\n}\n\nexport default function clickCell(cell, state) {\n  const { board, selectedCells } = state;\n\n  if (cell.isMine) {\n    return {\n      ...state,\n      gameRunning: false,\n      gameOver: true,\n      gameWon: false,\n      detonate: cell // Flag this cell as about to detonate.  The `Game` component will handle the animation\n    };\n\n  } else if (!selectedCells.includes(cell)) {\n    const newCells = clearCell(board, selectedCells, cell);\n\n    if (newCells.length + board.totalMines === board.totalCells) {\n      return {\n        ...state,\n        selectedCells: newCells,\n        gameRunning: false,\n        gameOver: true,\n        gameWon: true\n      }\n\n    } else {\n      return {\n        ...state,\n        gameRunning: true,\n        selectedCells: newCells\n      };\n    }\n  }\n}\n","import GameBoard from '../lib/GameBoard';\nimport { difficulties } from '../lib/difficulties';\nimport clickCell from './click-cell';\nimport flagCell from './flag-cell';\n\nconst RESET_GAME_ACTIONS = [\n  'SET_DIFFICULTY',\n  'RESET_GAME'\n];\n\nfunction stateFilter(state, { type, ...action }) {\n  const {\n    selectedCells,\n  } = state;\n\n  if (RESET_GAME_ACTIONS.includes(type)) {\n    const difficulty = action.clearDifficutly === true ? null : action.difficulty || state.difficulty;\n    const gameParams = difficulties[difficulty];\n    const board = difficulty ? new GameBoard(gameParams.height, gameParams.width, gameParams.density) : null;\n\n    return {\n      ...state,\n      gameRunning: false,\n      gameOver: false,\n      gameWon: false,\n      selectedCells: [],\n      flaggedCells: [],\n      exploded: [],\n      difficulty,\n      board\n    };\n\n  } else if (type === 'CHAIN_REACTION') {\n    return {\n      ...state,\n      detonate: false,\n      exploded: [\n        ...state.exploded,\n        action.cell\n      ]\n    };\n\n  } else if (type === 'CLICK_CELL') {\n    return clickCell(action.cell, state);\n\n  } else if (type === 'CLICK_FLAG' && !selectedCells.includes(action.cell)) {\n    return flagCell(action.cell, state);\n  }\n\n  return state;\n}\n\nexport default (state = {}, action) => {\n  const result = stateFilter(state, action);\n\n  return result;\n}\n","export default function flagCell(cell, state) {\n  const {\n    flaggedCells\n  } = state;\n\n  if (flaggedCells.includes(cell)) {\n    return {\n      ...state,\n      flaggedCells: flaggedCells.filter(aCell => aCell.id !== cell.id)\n    }\n  } else {\n    return {\n      ...state,\n      flaggedCells: [\n        ...flaggedCells,\n        cell\n      ]\n    }\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducers);\n\nrender((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}